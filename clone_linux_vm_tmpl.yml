---
- hosts: 127.0.0.1
  gather_facts: false
  connection: local

# Requirements:
# python >= 2.6
# PyVmomi

  vars:
    vcenter_hostname: 'cbc-vcenter01.muccbc.hq.netapp.com'
    vcenter_datacenter: 'MUCCBC'
    vcenter_cluster: 'CBC-Demo_UCS'
    esxi_hosts: 
      - 'cbc-esxi211.muccbc.hq.netapp.com'
      - 'cbc-esxi212.muccbc.hq.netapp.com'
      - 'cbc-esxi213.muccbc.hq.netapp.com'
      - 'cbc-esxi214.muccbc.hq.netapp.com'
    vm_note: 'Created by Ansible via Jenkins for'
    vm_net1: 'v172_client'
    eth0_netmask: '255.255.0.0'
    eth0_gateway: '172.30.0.1'
    vm_net2: 'v192_data'
    eth1_netmask: '255.255.0.0'
    vcenter_datastores: 
      - 'cbc_esxi_demo_linux_ds_01'
      - 'cbc_esxi_demo_linux_ds_02'
      - 'cbc_esxi_demo_linux_ds_03'
    ansible_host_group: 'CentOS_User_VMs'
    guest_id: 'centos64Guest'
    host_vars: '/etc/ansible/host_vars'
    folder: '/vm/Users/'
    gui: 'none'
    domain: 'muccbc.hq.netapp.com'
    OS: 'CentOS'
    OS_Version: '7.6'
    tz_code: 110
    install_packages: "none"
    trident_version: "19.04.1"
  

########TASKS ################################################################
  tasks:
#  - name: Install PyVmomi with pip
#    pip:
#      name: PyVmomi
#      state: latest

  - name: Include from vault
    include_vars:
      file: ../accounts.yml

  - name: Set Facts - ESX Host
    set_fact:
      esxi_host: '{{ esxi_hosts|random }}'

  - name: Set Facts - ESX Datastore
    set_fact:
      vcenter_datastore: '{{ vcenter_datastores|random }}'

  - name: Set CentOS 7 Facts
    set_fact:
      template_hostname: '{{ OS }}_{{ OS_Version }}_t'
      ansible_host_group: 'CentOS_User_VMs'
      guest_id: 'centos7_64Guest'
    when: OS is search("CentOS") and OS_Version is search("7.")
          

  - name: Set CentOS 8 Facts
    set_fact:
      template_hostname: '{{ OS }}_{{ OS_Version }}_t'
      ansible_host_group: 'CentOS_User_VMs'
      guest_id: 'centos8_64Guest'
    when: OS is search("CentOS") and OS_Version is search("8.")

  - name: Set Ubuntu Facts
    set_fact:
      template_hostname: '{{ OS }}_{{ OS_Version }}_t'
      ansible_host_group: 'Ubuntu_User_VMs'
      guest_id: 'ubuntu64Guest'
    when: OS is search("Ubuntu")

  - name: Set Debian Facts
    set_fact:
      template_hostname: '{{ OS }}_{{ OS_Version }}_t'
      ansible_host_group: 'Debian_User_VMs'
      guest_id: 'debian10_64Guest'
    when: OS is search("Debian")

  - name: Set SLES Facts
    set_fact:
      template_hostname: '{{ OS }}_{{ OS_Version }}_t'
      ansible_host_group: 'SLES_User_VMs'
      guest_id: 'suse64Guest'
    when: OS is search("sles")

# get date
  - set_fact: creationdate="{{lookup('pipe','date "+%Y/%m/%d %H:%M"')}}"

  - name: Create a folder for the user if not present 
    vcenter_folder:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vsphere_user }}'
      password: '{{ vsphere_password }}'
      datacenter: '{{ vcenter_datacenter }}'
      validate_certs: no
      parent_folder: 'Users'
      folder_name: '{{ vm_user }}'
      state: present
    register: sub_folder_creation_result
    delegate_to: localhost

  - debug: var=sub_folder_creation_result

# Create a VM from a template
  - name: create the VM
    vmware_guest:
      hostname: '{{ vcenter_hostname }}'
      username: '{{ vsphere_user }}'
      password: '{{ vsphere_password }}'
      datacenter: '{{ vcenter_datacenter }}'
      validate_certs: no
      esxi_hostname: '{{ esxi_host }}'
      folder: '{{ folder }}{{ vm_user }}'
      name: '{{ vm_name }}'
      state: poweredon
      guest_id: '{{ guest_id }}'
      annotation: "{{ vm_note }} {{ vm_user }} - {{ creationdate }}"
      networks:
      - name: '{{ vm_net1 }}'
        ip: '{{ eth0_ip }}'
        netmask: '{{ eth0_netmask }}'
        gateway: '{{ eth0_gateway }}'
        dns_servers:
        - 10.65.56.5
        - 10.65.56.6
      - name: '{{ vm_net2 }}'
        ip: '{{ eth1_ip }}'
        netmask: '{{ eth1_netmask }}'        
      hardware:
        memory_mb: '{{ memory_mb }}'
        num_cpus: '{{ num_cpus }}'
      customization:
        timezone: '{{ tz_code }}'
        dns_servers:
        - 10.65.56.5
        - 10.65.56.6
        domain: '{{ domain }}'
        hostname: '{{ vm_name }}'
        orgname: NetApp
      template: '{{ template_hostname }}'
      wait_for_ip_address: yes
    delegate_to: localhost

  - name: Add host to group
    add_host:
      name: '{{ eth0_ip }}'
      groups: Linux_Users
      eth0_ipv4address: '{{ eth0_ip }}'
      cbc_server_type: "User VM"

  - name: "Wait for SSH banners"
    local_action: wait_for port=22 host="{{ eth0_ip }}" search_regex=OpenSSH delay=5
    become: False

##################################
# Post-Installation
- name: Configure VM
  hosts: Linux_Users
  become: yes
  become_method: sudo
  gather_facts: true

  tasks:
  - name: Set Facts - ServerName
    set_fact:
      Server_Name: '{{ vm_name }}'
      Owner: '{{ vm_user }}'

  - debug: var=Server_Name
  - debug: var=Owner

  - replace:
      path: '/etc/ssh/sshd_config'
      regexp: '#Banner none'
      replace: 'Banner /etc/banner'
      backup: yes
    run_once: true

  - name: Copy Banner
    template:
      src: ../templates/banner.j2
      dest: '/etc/banner'
    notify: restart sshd

  - name: Install Updates -  CentOS
    yum:
      name: '*'
      state: latest
      exclude: kernel*
      update_cache: yes
    when: OS is search("CentOS")

  - name: Install Updates -  Ubuntu & Debian
    apt:
      upgrade: dist      
    when: OS is search("Ubuntu") or
          OS is search("Debian")

  - name: Install Updates - SLES
    zypper:
      name: '*'
      state: latest
    when: OS is search("sles")

  - name: Create new Linux User '{{ Owner }}'
    user:
      name: '{{ Owner }}'
      comment: User Created with ansible
      uid: 1100
      groups: wheel
      password: "{{ user_password | password_hash('sha512') }}"
      update_password: on_create
    when: OS is search("CentOS")

  - name: Create new Linux User '{{ Owner }}'
    user:
      name: '{{ Owner }}'
      comment: User Created with ansible
      uid: 1100
      groups: sudo
      password: "{{ user_password | password_hash('sha512') }}"
      update_password: on_create
    when: OS is search("Ubuntu") or
          OS is search("Debian")

  - name: Expiring password for user "{{ Owner }}"
    shell: chage -d 0 '{{ Owner }}'

  - name: End if no package installation needed
    meta: end_play
    when: install_packages == "none"

############## INSTALL Ansible Block ##############
  - block:
#      - name: Install pip
#        include_role:
#          name: pip-install

      - name: Install Ansible
        include_role:
          name: ansible-role-ansible
        vars:
          ansible_default_release: "2.8"
          ansible_install_method: "package"

    when: install_packages == "install-ansible"
############## End Ansible Block ##############

############## INSTALL Docker Block ##############
  - block:
      - name: Include turn off firewall role
        include_role:
          name: turnoff_firewall

      - name: Include NTP role
        include_role:
          name: ntp

      - name: Include Docker Role
        include_role:
          name: docker
        vars:
          docker_package_version: latest

#      - name: Install Trident
#        include_role:
#          name: trident
#        vars:
#          trident_inst_type: 'docker'
#          trident_version: '{{ trident_version }}'
#          exportPolicy: 'docker_hosts'

    when: install_packages == "install-docker"
############## End Docker Block ##############

#*******************END PLAY HERE**********************
  - meta: end_play
#*******************END PLAY HERE**********************

  - name: add to ansible hosts file
    lineinfile:
      dest: /etc/ansible/hosts
      insertafter: '^\[{{ ansible_host_group }}\]'
      line: '{{ vm_name }}.{{ domain }}'
    run_once: true

#  - name: Git Add Hosts
#      command: '/usr/bin/git add /etc/ansible/hosts'
#    register: gitaddhosts

  - debug: var=gitaddhosts

  - name: Git Add host_vars
    command: "/usr/bin/git add {{ host_vars }}/{{ vm_name }}.{{ domain }}"
    register: gitaddhostsvars

  - debug: var=gitaddhostsvars

# Install X Windows - This section needs to be tested in the future
  - name: install the 'Gnome desktop' environment group
    yum:
      name: "@^gnome-desktop-environment"
      state: latest
    when: gui == "gnome"

  - name: install the 'KDE desktop' environment group
    yum:
      name: "@^KDE Plasma Workspaces"
      state: present
    when: gui == "kde"

  - name: Create symlink
    file: path='/etc/systemd/system/default.target'
          src='/lib/systemd/system/runlevel5.target'
          state=link 
          force=yes
    when: gui != "none"

  handlers:
    - name: restart sshd
      service:
        name: sshd
        state: restarted
